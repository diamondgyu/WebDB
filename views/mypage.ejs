<!DOCTYPE html>
<head>
    <style>
        @font-face {
            font-family: 'Pretendard';
            src: url('https://fastly.jsdelivr.net/gh/Project-Noonnu/noonfonts_2107@1.1/Pretendard-Regular.woff') format('woff');
            font-weight: 400;
            font-style: normal;
        }

        body {
            margin-left: 80px;
            margin-right: 80px;
            font-family: Pretendard;
            background-color: #1a1a1a;
            color: #fff;
        }

        th {
            width: 600px;
            font-family: Pretendard-Bold;
            background-color: #1a1a1a;
            color: #888;
            border-bottom: 1px solid #444;
            border-top: 1px solid #444;
            padding: 10px;
            text-align: center;
            height: 20px;
        }

        tbody, td, tfoot, tr {
            height: 20px;
            color: #fff;
            text-align: center;
        }
    </style>
</head>

<body>
    <div>
        <h1 id="ID"></h1>
        <button id="logoutBtn" onclick="logoutBtn()">Logout</button>
    </div>
    
    <hr>
    <h2>Deposit</h2>
    <p id="deposit"></p>
    <button id="depositBtn" onclick="depositBtnAdd()">Add 1000</button>
    <button id="depositBtn" onclick="depositBtnSub()">Subtract 1000</button>
    <hr color="#888">
    <h2>Stocks</h2>
    <input text="text" id="searchInput" placeholder="type stock code" />
    <button id="searchBtn" onclick="searchStockBtn()">Search</button>
    <table id="stocks">
        <thead>
            <th>User ID</th>
            <th>Stock Code</th>
            <th>Quantity</th>
            <th>Available quantity </th>
            <th>Price Bought</th>
            <th>Profit</th>
        </thead>
    </table>
    <hr color="#888">
    <h2>Active Orders</h2>
    <table id="orders_active">
        <thead>
            <th>Trade ID</th>
            <th>User submitted</th>
            <th>Stock Code</th>
            <th>Side</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>time submitted</th>
            <th>Filled</th>
            <th>Cancel</th>
        </thead>
    </table>
    <hr color="#888">
    <h2>Filled Orders</h2>
    <div>
        <input text="text" id="searchHistInput" placeholder="type stock code" />
        <p >From</p><input id="startDate" type="date">
        <p>To</p><input id="endDate" type="date">
        <button id="searchBtn" onclick="searchHistBtn()">Search</button>
    </div>
    <table id="orders_filled">
        <thead>
            <th>Trade ID</th>
            <th>User ID</th>
            <th>Stock code</th>
            <th>Side</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Timestamp</th>
        </thead>
    </table>
    <script>
        function logoutBtn() {
            sessionStorage.clear();
            location.href = "http://localhost:3000/";
        }
        

        function searchStockBtn() {
            var stockCode = document.getElementById('searchInput').value;
            console.log(stockCode);
            fetch('http://localhost:3000/api/getBalance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID"),
                    stockCode: stockCode
                })
            })
            .then(res => res.json())
            .then(data => {
                console.log(data);
                if (data['result'] === false) data['data'] = [{log: "No result"}];
                drawTable(document.getElementById('stocks'), data['data']);
            })
        }

        function searchHistBtn() {
            var startDate = document.getElementById('startDate').valueAsNumber;
            var endDate = document.getElementById('endDate').valueAsNumber;
            // console.log(startDate, endDate);
            if (isNaN(startDate)) startDate = 0;
            if (isNaN(endDate)) endDate = Date.now();
            endDate += 86400000;
            // console.log(startDate, endDate);
            var stockCode = document.getElementById('searchHistInput').value;
            if (stockCode == undefined) stockCode = "";
            // console.log(startDate);
            // console.log(endDate);
            fetch('http://localhost:3000/api/getFilledOrders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID"),
                    stockCode: stockCode,
                    period_start: startDate,
                    period_end: endDate
                })
            })
            .then(res => res.json())
            .then(data => {
                console.log(data);
                if (data['result'] === false) data['data'] = [{log: "No Result"}];
                drawTable(document.getElementById('orders_filled'), data['data']);
            })
        }

        function depositBtnAdd() {
            fetch('http://localhost:3000/api/deposit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID"),
                    amount: 1000
                })
            })
            .then(res => res.json())
            .then(data => {
                console.log(data);
                
                document.getElementById('deposit').textContent = parseInt(document.getElementById('deposit').textContent) + 1000

            })
        }

        function depositBtnSub() {
            fetch('http://localhost:3000/api/deposit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID"),
                    amount: -1000
                })
            })
            .then(res => res.json())
            .then(data => {
                console.log(data);
                
                document.getElementById('deposit').textContent = parseInt(document.getElementById('deposit').textContent) - 1000
                // load_data();
            })
        }
    </script>

    <script>

        console.log('sessionStorage.getItem("ID")', sessionStorage.getItem("ID"));

        if (sessionStorage.getItem("ID") === null || sessionStorage.getItem("ID") === undefined) {
            alert('Please login first!');
            window.location.href = 'http://localhost:3000/login';
        }
        
        // add orders to table 'orders'
        var user;
        var balance;
        var orders_unfilled;
        var orders_filled;

        // draw data to table
        function drawTable(table, data) {
            const rowCount = table.rows.length;

            for (let i = rowCount - 1; i > 0; i--) {
                table.deleteRow(i);
            }
            // console.log(data)
            keys = Object.keys(data);
            // console.log(keys)
            for (var i = 0; i < keys.length; i++) {
                var row = table.insertRow();
                
                keys2 = Object.keys(data[keys[i]]);
                
                for (var j = 0; j < keys2.length; j++) {
                    var cell = row.insertCell();
                    if (keys2[j] === 'trade_unix_time')
                    {
                        // console.log(data[keys[i]][keys2[j]])
                        cell.textContent = new Date(data[keys[i]][keys2[j]]).toLocaleString();
                    }
                    else cell.textContent = data[keys[i]][keys2[j]];
                }
            }
        }

        async function drawStockTable(table, dt) {
            const rowCount = table.rows.length;

            for (let i = rowCount - 1; i > 0; i--) {
                table.deleteRow(i);
            }

            // console.log(dt)
            const keys1 = Object.keys(dt);
            console.log('drawStockTable', keys1)
            for (var i = 0; i < keys1.length; i++) {
                const idx = i;
                // console.log('calcprofit', keys[idx])
                var row = table.insertRow();
                console.log(dt)
                console.log(keys1)
                console.log(dt[keys1[i]])
                keys2 = Object.keys(dt[keys1[idx]]);
                console.log(keys2)
                for (var j = 0; j < keys2.length; j++) {
                    var cell = row.insertCell();
                    cell.textContent = dt[keys1[idx]][keys2[j]];
                }

                console.log(keys1)

                var cell = row.insertCell();
                var price_now;
                // console.log('inventory: ', data[keys[idx]]['stock_code']);
                console.log('calcprofit', dt[keys1[idx]]['stock_code'])
                await fetch('http://localhost:3000/api/getStocks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        stockCode: dt[keys1[idx]]['stock_code'],
                    })
                })
                .then(res => res.json())
                .then(data => {

                    // console.log('calcprofit3 ', data[keys[idx]]['stock_code'])
                    // console.log('calcprofit3 ', dt['data'], keys[idx])

                    console.log(data)                  
                    price_now = parseFloat(data[0]['price']);
                    console.log(price_now)
                    // console.log(price_now);  
                    // console.log(data);
                    // console.log('calcprofit2', dt['data'], idx, keys[idx]);
                })
                console.log(price_now, dt[keys1[idx]]['price_bought'])
                cell.textContent = `${Math.round((price_now/parseFloat(dt[keys1[idx]]['price_bought'])-1)*10000)/100}%`;
            }
        }

        function cancelOrder() {
            var id = event.target.id;
            // console.log(id);
            fetch('http://localhost:3000/api/cancelOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID"),
                    trade_id: id
                })
            })
            .then(res => res.json())
            .then(data => {
                console.log(data);
                // load_data();
            })
        }

        function drawActiveOrders(table, data) {
            const rowCount = table.rows.length;

            for (let i = rowCount - 1; i > 0; i--) {
                table.deleteRow(i);
            }

            // console.log(data)
            keys = Object.keys(data);
            // console.log(keys)
            for (var i = 0; i < keys.length; i++) {
                var row = table.insertRow();
                console.log('draw active orders')
                keys2 = Object.keys(data[keys[i]]);
                for (var j = 0; j < keys2.length; j++) {
                    var cell = row.insertCell();
                    if (keys2[j] === 'trade_unix_time')
                    {
                        // console.log(data[keys[i]][keys2[j]])
                        cell.textContent = new Date(data[keys[i]][keys2[j]]).toLocaleString();
                    }
                    else cell.textContent = data[keys[i]][keys2[j]];
                }
                var cell = row.insertCell();
                console.log('draw active orders');
                console.log(data[0]);
                if (!(data[0]['log'] === 'No result'))
                    cell.innerHTML = `<button id=${data[keys[i]]['trade_id']} onclick="cancelOrder()">Cancel order</button>`
            }
        }

        async function load_data()
        {
            await fetch('http://localhost:3000/api/user', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
                , body: JSON.stringify({
                    ID: sessionStorage.getItem("ID"),
                    password: sessionStorage.getItem("password")
                })
            })
            .then(response => response.json())
            .then(data => {
                
                if (data['result'] === false) 
                {
                    alert('ID or password is wrong');
                    // window.location = 'http://localhost:3000/login';
                }
                console.log('User data:');
                console.log(data['data']);
                user = data['data'][0];
            });

            await fetch('http://localhost:3000/api/getBalance', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID")
                })
            })
            .then(res => res.json())
            .then(data => {
                
                if (data['result'] === false) data['data'] = [{log: "No result"}]
                console.log('Balance data:');
                console.log(data['data']);
                balance = data['data'];
            })

            await fetch('http://localhost:3000/api/getUnfilledOrders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID")
                })
            })
            .then(res => res.json())
            .then(data => {
                
                if (data['result'] === false) data['data'] = [{log: "No result"}]
                console.log('Unfilled orders data:');
                console.log(data['data']);
                orders_unfilled = data['data'];
            })

            await fetch('http://localhost:3000/api/getFilledOrders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    ID: sessionStorage.getItem("ID"),
                    period_start: 0,
                    period_end: Date.now()
                })
            })
            .then(res => res.json())
            .then(data => {
                
                if (data['result'] === false) data['data'] = [{log: "No result"}]
                // console.log('Filled orders data:');
                // console.log(data['data']);
                orders_filled = data['data'];
            })

            // console.log(user)
            // console.log(balance)
            // console.log(orders_unfilled)
            // console.log(orders_filled)

            // add id to h1 'ID'
            document.getElementById('ID').textContent = 'Hello '+sessionStorage.getItem('ID')

            // add deposit to p 'deposit'
            document.getElementById('deposit').textContent = user['deposit']

            console.log(balance);
            drawStockTable(document.getElementById('stocks'), balance);
            drawActiveOrders(document.getElementById('orders_active'), orders_unfilled);
            drawTable(document.getElementById('orders_filled'), orders_filled);
        }

        load_data();
    </script>
</body>
</html>